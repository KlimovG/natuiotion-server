# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserModel {
  id: Float!
  name: String!
  email: String!
  phone: String!
  password: String!
}

type RobotModel {
  id: Float!
  userId: Float!
  serial: String!
  status: RobotStatus!
}

enum RobotStatus {
  ON
  ACTIVE
  LEFT_AREA
  PROBLEM
  OFF
}

type UserDto {
  id: Float!
  name: String!
  token: String!
}

type VescStatisticModel {
  id: Float!
  sessionModel: SessionsModel!
  sessionId: Float!
  voltage: Float!
  timestamp: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type WeedTypesModel {
  id: Float!
  label: String!
}

type GpsPointModel {
  id: Float!
  quality: Float!
  latitude: Float!
  longitude: Float!
}

type PointOfPathsModel {
  id: Float!
  pointNumber: Float!
  gpsPoint: GpsPointModel!
  extractedWeed: [ExtractedWeedsModel!]
}

type ExtractedWeedsModel {
  id: Float!
  pointPathId: Float!
  pointPath: PointOfPathsModel
  sessionId: Float!
  session: SessionsModel!
  weedType: WeedTypesModel!
  number: Float!
}

type FieldModel {
  id: Float!
  label: String!
  corners: [[Float!]!]!
}

type SessionsModel {
  id: Float!
  startTime: DateTime!
  endTime: DateTime!
  prevSessionId: Float
  robotSerialNumber: RobotModel!
  robotNumber: String!
  extractedWeeds: [ExtractedWeedsModel!]
  fieldName: FieldModel!
  statistic: VescStatisticModel
  extracted: String
}

type ChartDataDto {
  labels: [String!]!
  data: [Float!]!
}

type StatisticDto {
  voltage: Float
  duration: String
  totalNumber: Float
  chart: ChartDataDto
}

type ExtractedDto {
  id: Float!
  pointPath: [Float!]
  weedType: String!
  number: Float!
}

type PathDto {
  path: [[Float!]!]
}

type MapDataDto {
  extracted: [ExtractedDto!]
  path: PathDto
  field: FieldModel
}

type Query {
  customers: [UserModel!]!
  customer(id: Float!, name: String!, email: String!, phone: String!): UserDto!
  getRobotForUser: [RobotModel!]!
  getRobotStatus(serial: String!): RobotModel!
  getAllSessions: [SessionsModel!]!
  getSessionsForRobot(serial: String!): [SessionsModel!]!
  getLastSessionForRobot(serial: String!): String!
  getMoreSessionsForRobot(serial: String!, sessionId: Float!): [SessionsModel!]!
  getStatisticForSession(session: Float!): VescStatisticModel!
  getRobotStats(session: Float!): StatisticDto!
  getMapData(sessionId: Float!): MapDataDto
}

type Mutation {
  createUser(data: UserRegistrationInput!): UserModel!
}

input UserRegistrationInput {
  name: String!
  email: String!
  phone: String!
  password: String!
}